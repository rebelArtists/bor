name: CI
on: [push, pull_request]
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17
      - name: Set commit sha for use as Docker tag
        id: vars
        shell: bash
        run: |
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
      # - name: "Build binaries"
      #   run: make all
      # - name: "Run tests"
      ##   run: make test
      - name: Reconfigure git to use HTTP authentication
        run: >
          git config --global url."https://oauth2:${{ secrets.GH_SSH_KEY }}@github.com".insteadOf ssh://git@github.com
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.SANDBOX_ID }}
          aws-secret-access-key: ${{ secrets.SANDBOX_KEY }}
          aws-region: us-east-2
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      # - name: Build, tag, and push image to Amazon ECR
      #   env:
      #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      #     ECR_REPOSITORY: bor_images
      #     IMAGE_TAG: ${{ steps.vars.outputs.sha_short }}
      #   run: |
      #     docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
      #     docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          # terraform_version: 0.13.0
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_wrapper: false
      - name: 'Terraform Init'
        id: init
        working-directory: .github/actions/ci_deployment_cluster
        run: terraform init
      # - name: Terraform Plan
      #   id: plan
      #   working-directory: .github/actions/ci_deployment_cluster
      #   if: github.event_name == 'push'
      #   run: terraform plan -no-color -input=false
      #   continue-on-error: false
      # - name: Destroy any previous run artifacts
      #   id: destroy_artifacts
      #   working-directory: .github/actions/ci_deployment_cluster
      #   if: github.event_name == 'push'
      #   run: terraform destroy -auto-approve
      - name: Terraform Apply
        id: apply
        working-directory: .github/actions/ci_deployment_cluster
        if: github.event_name == 'push'
        run: |
          terraform apply -auto-approve -input=false
          echo ANSIBLE_PK=$`(terraform output -raw private_key)` >> $GITHUB_ENV
          echo DYNAMIC_INV=$(terraform output -raw ansible_inventory) >> $GITHUB_ENV
      # configure ansible dynamic inventory
      - name: Checkout
        uses: actions/checkout@v1
      - uses: dawidd6/action-ansible-playbook@v2
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.SANDBOX_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.SANDBOX_KEY }}
          AWS_REGION: us-east-2
          ECR_IMAGE: ${{ steps.login-ecr.outputs.registry }}/bor_images:${{ steps.vars.outputs.sha_short }}
        with:
          # Required, playbook filepath
          playbook: playbook.yml
          # Optional, directory where playbooks live
          directory: .github/actions/ansible
          # Optional, SSH private key
          key: "${{ env.ANSIBLE_PK }}"
          # Optional, todo make dynamic
          inventory: |
            ${{ env.DYNAMIC_INV }}
      - name: Destroy resources jobs
        id: destroy
        working-directory: .github/actions/ci_deployment_cluster
        if: github.event_name == 'push'
        run: terraform destroy -auto-approve
